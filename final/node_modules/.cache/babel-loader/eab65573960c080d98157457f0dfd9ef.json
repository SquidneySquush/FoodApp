{"ast":null,"code":"class ResizeableBuffer {\n  constructor(size = 100) {\n    this.size = size;\n    this.length = 0;\n    this.buf = Buffer.alloc(size);\n  }\n\n  prepend(val) {\n    if (Buffer.isBuffer(val)) {\n      const length = this.length + val.length;\n\n      if (length >= this.size) {\n        this.resize();\n\n        if (length >= this.size) {\n          throw Error('INVALID_BUFFER_STATE');\n        }\n      }\n\n      const buf = this.buf;\n      this.buf = Buffer.alloc(this.size);\n      val.copy(this.buf, 0);\n      buf.copy(this.buf, val.length);\n      this.length += val.length;\n    } else {\n      const length = this.length++;\n\n      if (length === this.size) {\n        this.resize();\n      }\n\n      const buf = this.clone();\n      this.buf[0] = val;\n      buf.copy(this.buf, 1, 0, length);\n    }\n  }\n\n  append(val) {\n    const length = this.length++;\n\n    if (length === this.size) {\n      this.resize();\n    }\n\n    this.buf[length] = val;\n  }\n\n  clone() {\n    return Buffer.from(this.buf.slice(0, this.length));\n  }\n\n  resize() {\n    const length = this.length;\n    this.size = this.size * 2;\n    const buf = Buffer.alloc(this.size);\n    this.buf.copy(buf, 0, 0, length);\n    this.buf = buf;\n  }\n\n  toString(encoding) {\n    if (encoding) {\n      return this.buf.slice(0, this.length).toString(encoding);\n    } else {\n      return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));\n    }\n  }\n\n  toJSON() {\n    return this.toString('utf8');\n  }\n\n  reset() {\n    this.length = 0;\n  }\n\n}\n\nmodule.exports = ResizeableBuffer;","map":{"version":3,"sources":["C:/Users/99596/Desktop/curriculum/SDP/FoodApp/final/node_modules/csv-parse/lib/ResizeableBuffer.js"],"names":["ResizeableBuffer","constructor","size","length","buf","Buffer","alloc","prepend","val","isBuffer","resize","Error","copy","clone","append","from","slice","toString","encoding","Uint8Array","prototype","call","toJSON","reset","module","exports"],"mappings":"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","sourcesContent":["\n\nclass ResizeableBuffer{\n  constructor(size=100){\n    this.size = size\n    this.length = 0\n    this.buf = Buffer.alloc(size)\n  }\n  prepend(val){\n    if(Buffer.isBuffer(val)){\n      const length = this.length + val.length\n      if(length >= this.size){\n        this.resize()\n        if(length >= this.size){\n          throw Error('INVALID_BUFFER_STATE')\n        }\n      }\n      const buf = this.buf\n      this.buf = Buffer.alloc(this.size)\n      val.copy(this.buf, 0)\n      buf.copy(this.buf, val.length)\n      this.length += val.length\n    }else{\n      const length = this.length++\n      if(length === this.size){\n        this.resize()\n      }\n      const buf = this.clone()\n      this.buf[0] = val\n      buf.copy(this.buf,1, 0, length)\n    }\n  }\n  append(val){\n    const length = this.length++\n    if(length === this.size){\n      this.resize()\n    }\n    this.buf[length] = val\n  }\n  clone(){\n    return Buffer.from(this.buf.slice(0, this.length))\n  }\n  resize(){\n    const length = this.length\n    this.size = this.size * 2\n    const buf = Buffer.alloc(this.size)\n    this.buf.copy(buf,0, 0, length)\n    this.buf = buf\n  }\n  toString(encoding){\n    if(encoding){\n      return this.buf.slice(0, this.length).toString(encoding)\n    }else{\n      return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length))\n    }\n  }\n  toJSON(){\n    return this.toString('utf8')\n  }\n  reset(){\n    this.length = 0\n  }\n}\n\nmodule.exports = ResizeableBuffer\n"]},"metadata":{},"sourceType":"script"}